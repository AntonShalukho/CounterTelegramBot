import TelegramBot from 'node-telegram-bot-api';
import fs from 'fs/promises';

const TOKEN = process.env.BOT_TOKEN;
const bot = new TelegramBot(TOKEN, { polling: true });

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const DATA_FILE = './bot-data.json';

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async function loadData() {
  try {
    const data = await fs.readFile(DATA_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    return { counters: {} };
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async function saveData(data) {
  await fs.writeFile(DATA_FILE, JSON.stringify(data, null, 2));
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
async function getCount(chatId) {
  const data = await loadData();
  return data.counters[chatId] || 0;
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
async function updateCount(chatId, change) {
  const data = await loadData();
  const current = data.counters[chatId] || 0;
  const newValue = current + change;
  data.counters[chatId] = newValue;
  await saveData(data);
  return newValue;
}

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
async function setCount(chatId, value) {
  const data = await loadData();
  data.counters[chatId] = value;
  await saveData(data);
  return value;
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const currentCount = await getCount(chatId);
  
  await bot.sendMessage(chatId, 
    `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ GitHub Actions! üöÄ\n` +
    `üìä –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: ${currentCount}\n\n` +
    `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
    `‚ûï /add - –î–æ–±–∞–≤–∏—Ç—å 1\n` +
    `‚ûï /add5 - –î–æ–±–∞–≤–∏—Ç—å 5\n` +
    `‚ûñ /minus - –£–º–µ–Ω—å—à–∏—Ç—å 1\n` +
    `‚ûñ /minus5 - –£–º–µ–Ω—å—à–∏—Ç—å 5\n` +
    `üéØ /set N - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∏—Å–ª–æ\n` +
    `üìä /count - –ü–æ–∫–∞–∑–∞—Ç—å —Å—á–µ—Ç\n` +
    `üîÑ /reset - –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞ 0\n` +
    `‚ÑπÔ∏è /info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è`
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /add
bot.onText(/\/add/, async (msg) => {
  const chatId = msg.chat.id;
  const newValue = await updateCount(chatId, 1);
  await bot.sendMessage(chatId, `‚úÖ +1 = ${newValue}`);
});

// –ö–æ–º–∞–Ω–¥–∞ /add5
bot.onText(/\/add5/, async (msg) => {
  const chatId = msg.chat.id;
  const newValue = await updateCount(chatId, 5);
  await bot.sendMessage(chatId, `‚úÖ +5 = ${newValue}`);
});

// –ö–æ–º–∞–Ω–¥–∞ /minus
bot.onText(/\/minus/, async (msg) => {
  const chatId = msg.chat.id;
  const newValue = await updateCount(chatId, -1);
  await bot.sendMessage(chatId, `‚úÖ -1 = ${newValue}`);
});

// –ö–æ–º–∞–Ω–¥–∞ /minus5
bot.onText(/\/minus5/, async (msg) => {
  const chatId = msg.chat.id;
  const newValue = await updateCount(chatId, -5);
  await bot.sendMessage(chatId, `‚úÖ -5 = ${newValue}`);
});

// –ö–æ–º–∞–Ω–¥–∞ /set - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ
bot.onText(/\/set (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const inputValue = match[1]; // –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
  const number = parseInt(inputValue);
  
  if (isNaN(number)) {
    await bot.sendMessage(
      chatId, 
      `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/set 15\n/set 100\n/set -5`
    );
    return;
  }
  
  const newValue = await setCount(chatId, number);
  
  await bot.sendMessage(
    chatId, 
    `üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${newValue}`
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /count
bot.onText(/\/count/, async (msg) => {
  const chatId = msg.chat.id;
  const current = await getCount(chatId);
  await bot.sendMessage(chatId, `üìä –°—á–µ—Ç: ${current}`);
});

// –ö–æ–º–∞–Ω–¥–∞ /reset
bot.onText(/\/reset/, async (msg) => {
  const chatId = msg.chat.id;
  await setCount(chatId, 0);
  await bot.sendMessage(chatId, `üîÑ –°–±—Ä–æ—à–µ–Ω–æ! –°—á–µ—Ç: 0`);
});

// –ö–æ–º–∞–Ω–¥–∞ /info
bot.onText(/\/info/, async (msg) => {
  const chatId = msg.chat.id;
  await bot.sendMessage(chatId, 
    `ü§ñ GitHub Actions Bot\n` +
    `üìç –ó–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ GitHub Actions\n` +
    `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n` +
    `üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏\n\n` +
    `üéØ –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: /set N - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—é–±–æ–µ —á–∏—Å–ª–æ`
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è /set –±–µ–∑ —á–∏—Å–ª–∞
bot.onText(/\/set$/, async (msg) => {
  const chatId = msg.chat.id;
  await bot.sendMessage(
    chatId,
    `‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã!\n\n` +
    `–ü—Ä–∏–º–µ—Ä—ã:\n` +
    `/set 15 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 15\n` +
    `/set 0 - —Å–±—Ä–æ—Å–∏—Ç—å\n` +
    `/set 100 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 100\n` +
    `/set -5 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ`
  );
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
bot.on('message', (msg) => {
  console.log(`üì® ${msg.from.first_name}: ${msg.text}`);
});

bot.on('polling_error', (error) => {
  console.log('‚ùå Polling error:', error.message);
});

console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ GitHub Actions...');
console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ /set –¥–æ–±–∞–≤–ª–µ–Ω–∞!');

// –ê–≤—Ç–æ-–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 55 –º–∏–Ω—É—Ç
setTimeout(() => {
  console.log('‚è∞ –ê–≤—Ç–æ-–æ—Å—Ç–∞–Ω–æ–≤–∫–∞...');
  bot.stopPolling();
  process.exit(0);
}, 55 * 60 * 1000);